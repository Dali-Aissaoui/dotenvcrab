name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  build-rust:
    name: Build Rust Binary (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dotenvcrab-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dotenvcrab-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dotenvcrab-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dotenvcrab-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dotenvcrab-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: contains(matrix.target, 'aarch64') && contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == *"aarch64"* && "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cargo install cross --locked
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Rename binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/dotenvcrab.exe ${{ matrix.artifact_name }}
          else
            cp target/${{ matrix.target }}/release/dotenvcrab ${{ matrix.artifact_name }}
            chmod +x ${{ matrix.artifact_name }}
          fi

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  create-release:
    name: Create GitHub Release
    needs: build-rust
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: dotenvcrab v${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dotenvcrab-linux-amd64/dotenvcrab-linux-amd64
            dotenvcrab-linux-arm64/dotenvcrab-linux-arm64
            dotenvcrab-macos-amd64/dotenvcrab-macos-amd64
            dotenvcrab-macos-arm64/dotenvcrab-macos-arm64
            dotenvcrab-windows-amd64.exe/dotenvcrab-windows-amd64.exe

  publish-npm:
    name: Publish NPM Package
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Extract version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -1 | cut -d '"' -f 2)
          echo "CARGO_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Cargo version: $VERSION"
          
      - name: Update npm package version
        run: |
          cd npm-package
          # Check if version already matches
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "${{ env.CARGO_VERSION }}" ]; then
            npm version ${{ env.CARGO_VERSION }} --no-git-tag-version
            echo "Updated npm package.json to version ${{ env.CARGO_VERSION }}"
          else
            echo "Version already set to $CURRENT_VERSION, no update needed"
          fi

      - name: Publish to NPM
        run: |
          cd npm-package
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
